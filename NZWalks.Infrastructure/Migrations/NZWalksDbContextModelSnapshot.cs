// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NZWalks.Infrastructure.DataContext;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NZWalks.Infrastructure.Migrations
{
    [DbContext(typeof(NZWalksDbContext))]
    partial class NZWalksDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NZWalks.Core.Domain.Entities.Difficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("269c567a-bd7d-47d3-902d-85d52d583aa9"),
                            Name = "Easy"
                        },
                        new
                        {
                            Id = new Guid("4c90f142-af3e-49cf-a9d1-677883d94cbb"),
                            Name = "Medium"
                        },
                        new
                        {
                            Id = new Guid("242b380d-b470-4026-bf32-9fdbdbce0a04"),
                            Name = "Hard"
                        });
                });

            modelBuilder.Entity("NZWalks.Core.Domain.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegionImageUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fdea4f6b-17c8-46cf-8806-ec97ba4f595a"),
                            Code = "USA",
                            Name = "United States America",
                            RegionImageUrl = "https://image-usa.com"
                        },
                        new
                        {
                            Id = new Guid("050f77b8-5c50-4d1e-9aaf-e034c018cbea"),
                            Code = "UK",
                            Name = "United Kingdom",
                            RegionImageUrl = "https://image-uk.com"
                        },
                        new
                        {
                            Id = new Guid("05fa9baa-e2de-422d-9420-87531c6c468b"),
                            Code = "CN",
                            Name = "China",
                            RegionImageUrl = "https://image-cn.com"
                        },
                        new
                        {
                            Id = new Guid("59201bbd-ff5d-49ba-9aa7-6d4427a2069b"),
                            Code = "Russia",
                            Name = "RS",
                            RegionImageUrl = "https://image-rs.com"
                        },
                        new
                        {
                            Id = new Guid("9c0b21ba-66bf-4a0c-8126-3a59415bdac3"),
                            Code = "Wellington",
                            Name = "WGN"
                        },
                        new
                        {
                            Id = new Guid("0cc09215-9a9a-4fc9-8408-e27b68b3b4dd"),
                            Code = "SouthLand",
                            Name = "STL"
                        });
                });

            modelBuilder.Entity("NZWalks.Core.Domain.Entities.Walk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uuid");

                    b.Property<double>("LengthInKm")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid");

                    b.Property<string>("WalkImageUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("RegionId");

                    b.ToTable("Walks");
                });

            modelBuilder.Entity("NZWalks.Core.Domain.Entities.Walk", b =>
                {
                    b.HasOne("NZWalks.Core.Domain.Entities.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NZWalks.Core.Domain.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("Region");
                });
#pragma warning restore 612, 618
        }
    }
}
